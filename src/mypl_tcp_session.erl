%%---------------------------------------------------------------------------
%% Copyright (c) 2007 Tony Garnock-Jones <tonyg@kcbbs.gen.nz>
%% Copyright (c) 2007 LShift Ltd. <query@lshift.net>
%%
%% Permission is hereby granted, free of charge, to any person
%% obtaining a copy of this software and associated documentation
%% files (the "Software"), to deal in the Software without
%% restriction, including without limitation the rights to use, copy,
%% modify, merge, publish, distribute, sublicense, and/or sell copies
%% of the Software, and to permit persons to whom the Software is
%% furnished to do so, subject to the following conditions:
%%
%% The above copyright notice and this permission notice shall be
%% included in all copies or substantial portions of the Software.
%%
%% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
%% EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%% MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
%% NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
%% BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
%% ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
%% CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
%% SOFTWARE.
%%---------------------------------------------------------------------------

-module(mypl_tcp_session).

-behaviour(gen_server).

-export([init/1, terminate/2, code_change/3, handle_call/3, handle_cast/2, handle_info/2]).

-record(session, {socket, mode, data_buffer}).

reply_line(Code, Text, false) ->
    [integer_to_list(Code), " ", Text, "\r\n"];
reply_line(Code, Text, true) ->
    [integer_to_list(Code), "-", Text, "\r\n"].

reply(Code, Text, State = #session{socket = Socket}) ->
    gen_tcp:send(Socket, reply_line(Code, Text, false)),
    State.

reset_buffers(State) ->
    State#session{data_buffer = []}.

handle_command_line(Line, State) ->
    {Command, Data} = case httpd_util:split(Line, " ", 2) of
                         {ok, [C]} -> {string:to_lower(C), ""};
                         {ok, [C, D]} -> {string:to_lower(C), D}
                      end,
    handle_command(Command, Data, State).

% include autogenerated handle_command code
% this code is generated by genkernelinterface.py
-include("auto_tcpapi.hrl").


strip_crlf(S) ->
    lists:reverse(strip_crlf1(lists:reverse(S))).

strip_crlf1([$\n, $\r | S]) -> S;
strip_crlf1([$\n | S]) -> S;
strip_crlf1([$\r | S]) -> S.

%---------------------------------------------------------------------------

init([Sock]) ->
    {ok, reset_buffers(#session{socket = Sock, mode = initializing})}.

terminate(_Reason, #session{socket = Sock}) ->
    gen_tcp:close(Sock),
    ok.

code_change(_OldVsn, State, _Extra) ->
    State.

handle_call(Request, _From, State) ->
    {stop, {bad_call, Request}, State}.

handle_cast({socket_control_transferred, _Sock}, State = #session{socket = Sock}) ->
    inet:setopts(Sock, [{active, true},
                        {recbuf, 65355}]), % recbuf == maximum line length
    {noreply, reply(200, "Hi there", State#session{mode = command})};

handle_cast(Request, State) ->
    {stop, {bad_cast, Request}, State}.

handle_info({tcp, _Sock, FullLine}, State = #session{mode = command}) ->
    handle_command_line(strip_crlf(FullLine), State);

handle_info({tcp_closed, _Sock}, State) ->
    % error_logger:warning_msg("SMTP session closed without warning"),
    {stop, normal, State};

handle_info({tcp_error, _Sock, Reason}, State) ->
    error_logger:warning_msg("SMTP session closed with socket error ~p", [Reason]),
    {stop, normal, State};

handle_info(Message, State) ->
    {stop, {bad_info, Message}, State}.

%%%%%%%%%% Conversion Functions

%% @doc converts a string to a positive integer
convertPositiveInteger(Str) ->
    {Val, _Rest} = string:to_integer(Str),
    Val.
    
%% @doc converts a string to a String
convertString(Str) ->
    Str.

%% @doc converts a string to a Boolean
convertBoolean(Str) ->
    case Str of
        "true" -> true;
        "True" -> true;
        "false" -> false;
        "False" -> false
    end.

%% @doc converts a string to an array of strings - not implemented
convertArray(_Str) ->
    [].
