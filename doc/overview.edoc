                    myPL/kernel-E overview page

@title myPL/kernel-E - A Database for Warehousing
@version {@version}
@copyright 2007 HUDORA GmbH
@author Maximillian Dornseif
@author Nicole Dornseif
@author Tobias Nockher
@author Lars Ronge
@author Christian Klein

@doc
== Introduction ==

myPL/kernel-E is a database specific to warehouse management. It is not meant as a Warehouse Management System
(WMS), but a building block for a WMS. Functionality of kernel-E is kept as simple as possible. It is assumed
that advanced functionality and interfacing to legacy systems is provided by higher layers of the myPL stack
possible not being coded in Erlang.

It is expected that kernel-E never directly interacts with the user but that everything is mediated to a
higher myPL layer which offers high level WMS services to command line tools and Web Applications.


=== Terminology ===

The basic objects in the warehouse and thus the basic terms are:

<dl>
<dt>units</dt>
<dd>things to be moved in the warehouse. Sometimes called UnitLoad. At the moment roughly the same as an pallets. Units have an UID called the MUI (Movable unit ID - maybe it is a SSCC/NVE), a height in mm used to choose a fitting location and possibly a string encoding the product, a quantity of products.</dd>

<dt>locations</dt>
<dd>locations are spaces where unit loads are stored. A location has a name to identify it, a height im mm
encoding the maximum size of unit load to be placed there, a flag encoding if the location can be accessed
without forklift, a preference (locations with higher preference get filled first). A location can with
preference 0 gets never filled automatically.</dd>

<dt>movements</dt>
<dd>representing the movement of units between locations.</dd>

<dt>picks</dt>
<dd>representing products to be removed from an unit. Unit with unfinished picks are considered unavailable
for movements.</dd>
</dl>

Some more obscure terms are:

<dl>
<dt>retrieval</dt>
<dd>Subset of movements: We use the term "retrieval" for movements out of the Warehouse ("Auslagerung").</dd>

<dt>disbanding</dt>
<dd>If we pick from an unit until it is empty, the unit disappears. We call this "disbanding".</dd>

<dt>MUI</dt>
<dd>The ID of an Unit. Sometimes also called NVE or SSCC.</dd>

<dt>Product or Content</dt>
<dd>An unique String identifying a Product/Article. Ususally an "Artikelnummer""/<a href="http://en.wikipedia.org/wiki/Stock_Keeping_Unit">SKU</a></dd>
</dl>

<dt>provisioninglists</dt>
<dd>"Komissionierbeleg". One or more picks or retievals to grouped together to fullfill a single order. Usually a Provisioninglist is printed on a sheet of paper.</dd>




== Features ==

=== FastFlux / Self Tuning===

FastFlux is the buzzword describing that myPL/kernel-E tries to go without any static configuration. So no
Configuration of ABC-Classification. etc. The system is expected to figure everything expect physical
constrains (e.g. location height) out by it self. FastFlux tries to cope with the fact that our business
changes from week to week and what might have been an "A" Article yesterday may be "C" tomorrow.

Instead of forcing staff to permanently reorganize the warehouse FastFlux tries to retune it self every day
for the current requirements without any external intervention.


=== Audit Logs ===

kernel-E saves two kind of audit logs: changes of stock of inventory and creation, movement and removal of
Units/MUIs/NVEs. It is expected that higher layers implement their own logging and that kernel-E logs are only
used for debugging. All operations changing stock of inventory are coupled with the generation of articleaudit
entries in an transaction and thus should succeed or fail always together - even in the presence of software
errors. The same goes for "unitaudit" entries.

Please check {@link mypl_audit} for further information.


== Data Model ==

Most entities described above (units, locations, movements, picks) are directly mapped to tables in the
"mnesia" storage backed. The database only keeps active entries. If data is not longer in use but considered
of a certain value it is copied into the "archive" table. Reservation is a table not mapping directly to an
warehouse entity. It is used to keep track of reservations of locations for incoming movements.

Many subsystems use their own internal database tables or in memory structures to keep track of things.

== API ==

This describes the API meant to be used by external callers. Internal functionality is described in the
respective modules.

{@link mypl_db} implements all storage and retrieval functionality ("Put this Pallet at that Location"). It
also documents the data types used by myPL/kernel-E.

{@link mypl_db_query} implements database query functionality ("How many RatzFratz are there?"). It also
documents how counting in myPL/kernel-E occurs.

{@link mypl_provisioning} implements calculations on how to pick and retrive from the warehouse. These are
sometimes CPU-heavy (several seconds per call).

{@link mypl_provpipeline} implements sheduling of what orders to pick by whom.

Function Names ending in a `*' are meant for internal use only.

=== Sample usage ===

In the following sections we try to give an overview on how to use tha API to accomplish certain tasks.

==== Warenzugang ====

Goods arrive from other Warehouses. Generate MUIs/NVEs for each Pallet. Call

{@link mypl_db:store_at_location/5. `store_at_location'}`("EINLAG", Nve, Quantity, Product, Height=1950)'

`movementID =' {@link mypl_db:init_movement_to_good_location/1. `init_movement_to_good_location'}`(Nve)'

Make somebody actually carry out the movement. Suggestion: Print one Sticker with the Nve to fix at the
Pallet and one sheet of Paper with the MovementID. When Somebody carried out the movement make him Present
the Paper to a barcode scanner. If you scanned the MovementId call

{@link mypl_db:commit_retrieval/1. `commit_retrieval'}`(movementID)'

and you are done.

==== Kommissionierung ====

Ad regular intervals all Orders to be processed are feed into myPL/kernelE by calling
{@link mypl_provpipeline:insert_pipeline/7} for each order. 

When a warehouse worker is looking for work call {@link mypl_provpipeline:get_picks/0} if he is on foot and 
{@link mypl_provpipeline:get_movements/0} if he is driving a fork lift. Keep in mind that both calls MAY
return more than one picklist/movement. Also be aware that 
{@link mypl_provpipeline:get_movements/0. `get_movements/0'} occasionaly returns a Movement for internal
Warehouse optimisation instead a Retrieval for fullfilling an order. You can idintify these by having
`OrderID == ""'.

Print the appropriate form and let the warehouse worker do his work.

When done call {@link mypl_provpipeline:commit_picks/3. `commit_picks/3'} or
{@link mypl_provpipeline:commit_movements/3. `commit_movements/3'} if these calls return `unfinished' request
the next Pick or Movement. If the call returns `provisioned', you can mark the Order as finished in the
ERP/SoftM. After doing so call {@link mypl_provpipeline:mark_as_finished/1. mark_as_finished/1} allow
flushing of unused resources.


==== Umlagerungen ====

A forklift driver is idle. Call {@link mypl_movements:create_automatic_movements/0}

to get a short list list of movement IDs. This movements will help to keep the warehouse organized and
effective. If the movements are done call

{@link mypl_db:commit_movement/1. `commit_movement'}`(movementID)'

for each movement ID and start over by calling 
{@link mypl_movements:create_automatic_movements/0. `create_automatic_movements/0'} again. 


== Modules ==

=== Public API ===

{@link mypl_db} implements all storage and retrieval functionality ("Put this Pallet at that Location"). It
also documents the data types used by myPL/kernel-E.

{@link mypl_db_query} implements database query functionality ("How many RatzFratz are there?"). It also
documents how counting in myPL/kernel-E occurs.

{@link mypl_provisioning} implements calculations on how to pick and retrive from the warehouse. These are
sometimes CPU-heavy (several seconds per call).

{@link mypl_audit} implements a audit log and access to already archived transactions. This implementation is
still lacking basic functionality.


=== Internal Modules ===

{@link mypl_movments} implements chosing movements to optimize the Warehouse. Functionality like cleanup and
something along the lines of "Fixplatznachschub". The User is expected to regularly call
{@link mypl_movments:create_automatic_movements/0} to see if the system has new suggestions. It is suggested that one forklift driver does nothing other than fulfilling the movements suggested by 
`create_automatic_movements/0'.

{@link mypl_abcserver} keeps statistic about pick frequency to allow auto-tuning the warehouse. {@link mypl_abcserver:get_abc()} is the only function available to the outside.

{@link mypl_requesttracker} keeps track of which goods have to be moved to floor level to fulfill requests for
picking. All functionality of {@link mypl_requesttracker} is meant for internal use only.

{@link mypl_server} contains the public API of myPL/kernel-E. . It heavily relies on the code in `include/auto_genserverapi.hrl' which is generated by `tools/genkernelinterface.py'. Functions in {@link mypl_server} mainly dispatch to {@link mypl_db}, {@link mypl_db_query} and {@link mypl_provisioning}.

{@link mypl_tcp_session} together with {@link generic_tcp_server} implements the network protocol used to
control myPL/kernel-E. It heavily relies on the code in `include/auto_tcpapi.hrl' which is generated by `tools/genkernelinterface.py' and basically is a mapping of the {@link mypl_server} API.


{@link mypl} {@link mypl_app} and {@link mypl_sup} implement starting, stopping and supervision of myPL/kernel-E.
