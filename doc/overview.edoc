                    myPL/kernel-E overview page

@title myPL/kernel-E - A Database for Warehousing
@version {@version}
@copyright 2007 HUDORA GmbH
@author Maximillian Dornseif
@author Nicole Dornseif
@author Tobias Nockher
@author Lars Ronge

@doc
== Introduction ==

myPL/kernel-E is a database specific to warehouse management. It is not meant as a Warehouse Management System
(WMS), but a building block for a WMS. Functionality of kernel-E is kept as simple as possible. It is assumed that advanced functionality and interfacing to legacy systems is provided by higher layers of the myPL stack possible not being coded in Erlang.

It is expected that kernel-E never directly interacts with the user but that everything is mediated to a higher myPL layer which offers high level WMS services to command line tools and Web Applications.


=== Terminology ===

The basic objects in the warehouse and thus the basic terms are:

<dl>
<dt>units</dt>
<dd>things to be moved in the warehouse. Sometimes called UnitLoad. At the moment roughly the same as an pallets. Units have an UID called the MUI (Movable unit ID - maybe it is a SSCC/NVE), a height in mm used to choose a fitting location and possibly a string encoding the product, a quantity of products.</dd>

<dt>locations</dt>
<dd>locations are spaces where unit loads are stored. A location has a name to identify it, a height im mm
encoding the maximum size of unit load to be placed there, a flag encoding if the location can be accessed
without forklift, a preference (locations with higher preference get filled first). A location can with
preference 0 gets never filled automatically.</dd>

<dt>movements</dt>
<dd>representing the movement of units between locations.</dd>

<dt>picks</dt>
<dd>representing products to be removed from an unit. Unit with unfinished picks are considered unavailable
for movements.</dd>
</dl>

Some more obscure terms are:

<dl>
<dt>retrieval</dt>
<dd>Subset of movements: We use the term "retrieval" for movements out of the Warehouse ("Auslagerung").</dd>

<dt>provisionings</dt>
<dd>We use the term "provisionings" to describe picks and/or retrievals. Usually the operator is only interested in provisionings and not if they are implemented by picks or retrievals.</dd>

<dt>disbanding</dt>
<dd>If we pich from an unit until it is empty, the unit disappears. We call this "disbanding".</dd>

<dt>MUI</dt>
<dd>The ID of an Unit.</dd>
</dl>

=== IDs ===

All objects handled by kernel-E are identified by unique IDs. For Units this IDs must be supplied by the caller. For all other Objects the IDs are created automatically. This IDs are rather long and hard to type and remember, e.g. ```1-685581-381576-testnode@testhost''' Higher layers of the myPL stack should handle this as opaque identifiers without any special meaning. The only guarantee is that IDs for the same object type sort in the order in which they are created. So when you sort by ID you automatically have also a list sorted by age.

It is expected that higher layers of the myPL stack map these IDs to sequential IDs for usage on documents.


==== Why these unwieldily IDs ? ====

Sequential IDs are nice and easy to handle for humans but don't map very well to distributed systems. Even with an SQL Database server one has trouble generating sequential IDs unless one manages to have the database to generate the IDs for the caller. For databases which do not provide this capability you are in deep trouble.

In a distributed system running on several servers they have to coordinate between them which is the next free number. This is a hard problem and while good solutions are readily available they make the system more complex and slow it down. So we have to partition the key space between nodes/servers. If one uses two nodes we could decide that the first node hands out the keys 1, 3, 5, 7, ... while the second node hands out 2, 4, 6, 8, ... - this works well until we add a third server. We have to rewrite the generation code on the two existing nodes. And we have to ensure that we update them at exactly at the same time. If you get to dozens of nodes and some machines being offline during addition of new nodes this gets very nasty very fast.

By using an algorithm which isn't based on shared counting  one can get rid of all this issues and concentrate on the more interesting problems.


=== Audit Logs ===

kernel-E saves two kind of audit logs: changes of stock of inventory and creation, movement and removal of Units/MUIs/NVEs. It is expected that higher layers implement their own logging and that kernel-E logs are only used for debugging. All operations changing stock of inventory are coupled with the generation of  articleaudit entries in an transaction and thus should succeed or fail always together - even in the presence of software errors. The same goes for "unitaudit" entries.

Please check {@link mypl_audit} for further information.

== Data Model ==

TBD

== API ==

This describes the API meant to be used by external callers. Internal functionality is described in the respective modules.

{@link mypl_db} implements all storage and retrieval functionality ("Put this Pallet at that Location"). It also documents the data types used by myPL/kernel-E.

{@link mypl_db_query} implements database query functionality ("How many RatzFratz are there?"). It also documents how counting in myPL/kernel-E occurs.

{@link mypl_provisioning} implements calculations on how to pick and retrive from the warehouse. These are sometimes CPU-heavy (several seconds per call).

Function Names ending in a `*' are meant for internal use only.

=== Sample usage ===

In the following sections we try to give an overview on how to use tha API to accomplish certain tasks.

==== Warenzugang ====

Goods arrive from other Warehouses. Generate MUIs/NVEs for each Pallets. Call 

{@link mypl_db:store_at_location/5. `store_at_location'}`("EINLAG", Nve, Quantity, Product, Height=1950)'

`movementID =' {@link mypl_db:init_movement_to_good_location/1. `init_movement_to_good_location'}`(Nve)'

Make somebody actually carry out the movement than call

{@link mypl_db:commit_retrieval/1. `commit_retrieval'}`(movementID)'

and you are done.

==== Kommissionierung ====

TBD

==== Umlagerungen ====

A forklift driver is idle. Call {@link mypl_movements:create_automatic_movements/0} 

to get a short list list of movement IDs. This movements will help to keep the warehouse organized and effective. If the movements are done call

{@link mypl_db:commit_movement/1. `commit_movement'}`(movementID)'

for each movement ID and start over by calling 
{@link mypl_movements:create_automatic_movements/0. `create_automatic_movements/0'} again. 


== Modules ==

=== Public API ===

{@link mypl_db} implements all storage and retrieval functionality ("Put this Pallet at that Location"). It also documents the data types used by myPL/kernel-E.

{@link mypl_db_query} implements database query functionality ("How many RatzFratz are there?"). It also documents how counting in myPL/kernel-E occurs.

{@link mypl_provisioning} implements calculations on how to pick and retrive from the warehouse. These are sometimes CPU-heavy (several seconds per call).

{@link mypl_audit} implements a audit log and access to already archived transactions. This implementation is still lacking basic functionality.


=== Internal Modules ===

{@link mypl_oracle} is to predict the future. If is there to give an educated guess about when which quantity of which product will needed by the warehouse. The user is expected to regulary (e.g. once a hour) seed {@link mypl_oracle} with information regarding orders in the next weeks and months. Details are still TBD.

{@link mypl_movments} implements chosing movements to optimize the Warehouse. Functionality like cleanup and
something along the lines of "Fixplatznachschub". The User is expected to regularly call
{@link mypl_movments:create_automatic_movements/0} to see if the system has new suggestions. It is suggested that one forklift driver does nothing other than fulfilling the movements suggested by 
`create_automatic_movements/0'.

{@link mypl_abcserver} keeps statistic about pick frequency to allow auto-tuning the warehouse. {@link mypl_abcserver:get_abc()} is the only function available to the outside.

{@link mypl_requesttracker} keeps track of which goods have to be moved to floor level to fulfill requests for
picking. All functionality of {@link mypl_requesttracker} is meant for internal use only.

{@link mypl_server} contains the public API of myPL/kernel-E. . It heavily relies on the code in `include/auto_genserverapi.hrl' which is generated by `tools/genkernelinterface.py'. Functions in {@link mypl_server} mainly dispatch to {@link mypl_db}, {@link mypl_db_query} and {@link mypl_provisioning}.

{@link mypl_tcp_session} together with {@link generic_tcp_server} implements the network protocol used to
control myPL/kernel-E. It heavily relies on the code in `include/auto_tcpapi.hrl' which is generated by `tools/genkernelinterface.py' and basically is a mapping of the {@link mypl_server} API.


{@link mypl} {@link mypl_app} and {@link mypl_sup} implement starting, stopping and supervision of myPL/kernel-E.
