%%%%%%%%%% autogenerated code follows
% -export([init_location/5,location_info/1,location_list/0,store_at_location/5,retrive/1,init_movement/2,init_movement_to_good_location/1,commit_movement/1,rollback_movement/1,init_pick/2,commit_pick/1,rollback_pick/1,count_product/1,count_products/0,find_provisioning_candidates/2,find_provisioning_candidates_multi/1,init_provisionings_multi/1,create_automatic_movements/0]).


% implementation for API and backend for init_location
init_location(Locname,Height,Floorlevel,Preference,Attributes)  ->
     gen_server:call(?SERVER, {init_location, {Locname,Height,Floorlevel,Preference,Attributes}}).

% implementation for API and backend for location_info
location_info(Locname)  ->
     gen_server:call(?SERVER, {location_info, {Locname}}).

% implementation for API and backend for location_list
location_list()  ->
     gen_server:call(?SERVER, {location_list, {}}).

% implementation for API and backend for store_at_location
store_at_location(Locname,Mui,Quantity,Product,Height)  ->
     gen_server:call(?SERVER, {store_at_location, {Locname,Mui,Quantity,Product,Height}}).

% implementation for API and backend for retrive
retrive(Mui)  ->
     gen_server:call(?SERVER, {retrive, {Mui}}).

% implementation for API and backend for init_movement
init_movement(Mui,Locname)  ->
     gen_server:call(?SERVER, {init_movement, {Mui,Locname}}).

% implementation for API and backend for init_movement_to_good_location
init_movement_to_good_location(Mui)  ->
     gen_server:call(?SERVER, {init_movement_to_good_location, {Mui}}).

% implementation for API and backend for commit_movement
commit_movement(MovementId)  ->
     gen_server:call(?SERVER, {commit_movement, {MovementId}}).

% implementation for API and backend for rollback_movement
rollback_movement(MovementId)  ->
     gen_server:call(?SERVER, {rollback_movement, {MovementId}}).

% implementation for API and backend for init_pick
init_pick(Quantity,Mui)  ->
     gen_server:call(?SERVER, {init_pick, {Quantity,Mui}}).

% implementation for API and backend for commit_pick
commit_pick(PickId)  ->
     gen_server:call(?SERVER, {commit_pick, {PickId}}).

% implementation for API and backend for rollback_pick
rollback_pick(PickId)  ->
     gen_server:call(?SERVER, {rollback_pick, {PickId}}).

% implementation for API and backend for count_product
count_product(Product)  ->
     gen_server:call(?SERVER, {count_product, {Product}}).

% implementation for API and backend for count_products
count_products()  ->
     gen_server:call(?SERVER, {count_products, {}}).

% implementation for API and backend for find_provisioning_candidates
find_provisioning_candidates(Quantity,Product)  ->
     gen_server:call(?SERVER, {find_provisioning_candidates, {Quantity,Product}}).

% implementation for API and backend for find_provisioning_candidates_multi
find_provisioning_candidates_multi(JsonList)  ->
     gen_server:call(?SERVER, {find_provisioning_candidates_multi, {JsonList}}).

% implementation for API and backend for init_provisionings_multi
init_provisionings_multi(JsonList)  ->
     gen_server:call(?SERVER, {init_provisionings_multi, {JsonList}}).

% implementation for API and backend for create_automatic_movements
create_automatic_movements()  ->
     gen_server:call(?SERVER, {create_automatic_movements, {}}).
%%%%%%%%%% call handlers (autogenerated) follow;

handle_call({init_location, {Locname,Height,Floorlevel,Preference,Attributes}}, _From, State) ->
    Ret = mypl_db:init_location(Locname,Height,Floorlevel,Preference,Attributes),
    {reply, Ret, State};

handle_call({location_info, {Locname}}, _From, State) ->
    Ret = mypl_db:location_info(Locname),
    {reply, Ret, State};

handle_call({location_list, {}}, _From, State) ->
    Ret = mypl_db:location_list(),
    {reply, Ret, State};

handle_call({store_at_location, {Locname,Mui,Quantity,Product,Height}}, _From, State) ->
    Ret = mypl_db:store_at_location(Locname,Mui,Quantity,Product,Height),
    {reply, Ret, State};

handle_call({retrive, {Mui}}, _From, State) ->
    Ret = mypl_db:retrive(Mui),
    {reply, Ret, State};

handle_call({init_movement, {Mui,Locname}}, _From, State) ->
    Ret = mypl_db:init_movement(Mui,Locname),
    {reply, Ret, State};

handle_call({init_movement_to_good_location, {Mui}}, _From, State) ->
    Ret = mypl_db:init_movement_to_good_location(Mui),
    {reply, Ret, State};

handle_call({commit_movement, {MovementId}}, _From, State) ->
    Ret = mypl_db:commit_movement(MovementId),
    {reply, Ret, State};

handle_call({rollback_movement, {MovementId}}, _From, State) ->
    Ret = mypl_db:rollback_movement(MovementId),
    {reply, Ret, State};

handle_call({init_pick, {Quantity,Mui}}, _From, State) ->
    Ret = mypl_db:init_pick(Quantity,Mui),
    {reply, Ret, State};

handle_call({commit_pick, {PickId}}, _From, State) ->
    Ret = mypl_db:commit_pick(PickId),
    {reply, Ret, State};

handle_call({rollback_pick, {PickId}}, _From, State) ->
    Ret = mypl_db:rollback_pick(PickId),
    {reply, Ret, State};

handle_call({count_product, {Product}}, _From, State) ->
    Ret = mypl_db_query:count_product(Product),
    {reply, Ret, State};

handle_call({count_products, {}}, _From, State) ->
    Ret = mypl_db_query:count_products(),
    {reply, Ret, State};

handle_call({find_provisioning_candidates, {Quantity,Product}}, _From, State) ->
    Ret = mypl_provisioning:find_provisioning_candidates(Quantity,Product),
    {reply, Ret, State};

handle_call({find_provisioning_candidates_multi, {JsonList}}, _From, State) ->
    Ret = mypl_provisioning:find_provisioning_candidates_multi(JsonList),
    {reply, Ret, State};

handle_call({init_provisionings_multi, {JsonList}}, _From, State) ->
    Ret = mypl_provisioning:init_provisionings_multi(JsonList),
    {reply, Ret, State};

handle_call({create_automatic_movements, {}}, _From, State) ->
    Ret = mypl_movements:create_automatic_movements(),
    {reply, Ret, State}.
%%%%%%%%%% autogenerated code ends

